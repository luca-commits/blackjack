@startuml "Client&Server_communication"
!theme vibrant
' !theme plain

page 2x1

class BlackJack{
    --
    OnInit(): void
}

class GameControl{
    my_id: int 
    currentGameState: GameState
    --
    init(): void
    connectToServer(): void
    updateGameState(): void
    startGame(): void
    hit(): void
    stand(): void
    split(): void
    double_down(): void
    insure(): void
    showNewRoundMessage(): void
    showGameOverMessage(): void
}
class GUI_Window{
    currentPanel: wxPanel
    --
    showPanel(): void
}



class ConnectionPanel{
    serverAddress: string
    serverPort: string
    playerName: string
    --
    getServerAddress(): string
    getServerPort(): string
    getPlayer(): string
}

class BetPanel{
    betSize: int
    playerMoney: int
    --
    getBetSize(): int
    getPlayerMoney(): int
}

Class MainGamePanel{
    --
    buildGameController(): void
    buildOthers(): void
    buildRoundCounter(): void
    buildMyself(): void

}



Class ClientNetworkManager{
    is_connected: bool
    connection: tcp_connector 
    --
    init(): int
    sendRequest(): void
    parseResponse(): void 
}

Class ResponseListenerThread{
    connector: tcp_connector
    -- 
    entry(): void
    outputError: void
}

' =======================================
Class server_network_manager{
    acc: tcp_acceptor
    player_id_to_address: map
    address_to_socket: map
    --
    listener_loop(): void
    handle_incoming_message(): void
    read_message(): void
    send_message(): void
    broadcast_message(): void
    on_player_left(): void
}

Class player_manager{
    player_map: map
    --
    get_player(): bool
    add_player(): bool
}

Class game_manager{
    game_state: GameState
    --
    is_started(): bool  
    is_finished(): bool
    start_game(): bool
    add_player(): bool
    try_remove_player(): bool
    hit(): bool
    stand(): bool
    split(): bool
    double_down(): bool
    insure(): bool
}

Class request_handler{
    handle_request: request_response*

}


' ===============================

' the following is exactly the same as in 
' the example client package

BlackJack ..> GameControl
BlackJack ..> GUI_Window

GUI_Window "0..1" --> "0..1" ConnectionPanel
GUI_Window "0..1" --> "0..1" MainGamePanel
GUI_Window "1" --* "1" GameControl : "Game Window"

ConnectionPanel "1" <--* "1" GameControl :  "connection Panel"
MainGamePanel "1" <--* "1" GameControl : "main Game Panel"

ClientNetworkManager .. GameControl
ClientNetworkManager "1" -- "0..1" ResponseListenerThread

' ============================
' Additional
wxPanel --|> MainGamePanel
wxPanel --|> ConnectionPanel
wxPanel --|> BetPanel
wxFrame --|> GUI_Window


' ======
' this is the same as in example server package but we combined
' game_instance and game_instance_manager to game_manager
request_handler .left. game_manager
request_handler ..> player_manager
request_handler <.. server_network_manager
game_manager ..> server_network_manager
game_manager ..> player_manager

' ===========



request_handler .. client_request
server_network_manager .. server_response

' ===========================

' package STUUFFFF <<Folder>> {
together {

class client_request{
string player_id
enum RequestType
}
client_request <|-- join_game_request
client_request <|-- start_game_request
client_request <|-- make_bet_request
client_request <|-- hit_request
client_request <|-- stand_request
client_request <|-- split_request
client_request <|-- double_down_request
client_request <|-- insure_request


class server_response{
enum ResponseType
}
server_response <|-up-  answer_rqst_response
server_response <|-up-  change_gemestate_response

}
server_response .down[hidden]. client_request



@enduml


' stuff to use evtl for beter graphics

' class TESTER<? extends Element> {
'   int size()
'   +myMethods()
'   You can use
'   several lines
'   ..
'   as you want
'   and group
'   ==
'   things together.
'   __
'   You can have as many groups
'   as you want
'   --
'   End of class
' }
' 
' left to right direction
' foo -left-> dummyLeft
' foo -right-> dummyRight
' foo -up-> dummyUp
' foo -down-> dummyDown
' ' 
' foo --> bar
' foo -[bold]-> bar1
' foo -[dashed]-> bar2
' foo -[dotted]-> bar3
' foo -[hidden]-> bar4
' foo -[plain]-> bar5


' foo --> bar                             : âˆ…
' foo -[#red,thickness=1]-> bar1          : [#red,1]
' foo -[#red,dashed,thickness=2]-> bar2   : [#red,dashed,2]
' foo -[#green,dashed,thickness=4]-> bar3 : [#green,dashed,4]
' foo -[#blue,dotted,thickness=8]-> bar4  : [blue,dotted,8]
' foo -[#blue,plain,thickness=16]-> bar5  : [blue,plain,16]
