@startuml
actor Player_1 as player

player -> GameControl: press 'stand'
activate GameControl

GameControl -> ClientNetworkManager: sendRequest()
activate ClientNetworkManager

ClientNetworkManager -> server_network_manager: action_request with\naction_type="stand"\nvia network
deactivate ClientNetworkManager
deactivate GameControl
activate server_network_manager

server_network_manager -> request_handler: handle_request()
activate request_handler

request_handler -> game_instance: stand()
activate game_instance

game_instance -> player_manager: get_player()
activate player_manager

player_manager --> game_instance: player
deactivate player_manager

group opt [it's the player's turn]
  game_instance -> game_instance: next_turn()

  group opt [round is over]
    game_instance -> game_instance: compute_dealers_hand()

    group par [for all players]
      game_instance -> game_instance: check_winner()

      alt player wins
        game_instance -> Player: win_round()
      else player loses
        game_instance -> Player: lose_round()
      end
    end
  end

  group par [for all other players]
    game_instance -> server_network_manager: broadcast_message()
    activate server_network_manager

    server_network_manager -> ClientNetworkManager: change_gamestate_msg\nvia network
    deactivate server_network_manager
    activate ClientNetworkManager

    ClientNetworkManager -> GameControl: updateGameState()
    activate GameControl

    GameControl -> player: display end of\nround screen
    deactivate ClientNetworkManager
    deactivate GameControl
  end
end

game_instance --> request_handler
deactivate game_instance

request_handler --> server_network_manager: response
deactivate request_handler

server_network_manager -> ClientNetworkManager: answer_rqst_response\nvia network
deactivate server_network_manager
activate ClientNetworkManager

ClientNetworkManager -> GameControl: updateGameState()
activate GameControl

GameControl -> player: display end of\nround screen
deactivate GameControl
deactivate ClientNetworkManager
